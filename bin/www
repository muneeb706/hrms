#!/usr/bin/env node

/**
 * This script is the entry point for the server. It sets up and starts an HTTP server that listens on a specified port.
 *
 * The server uses the Express application defined in app.js. It also sets up error and listening event handlers for the server.
 *
 */

const db = require("../db");

let server;
let port;

db.connect()
  .then(() => {
    console.log("Database connected");
    
    const app = require("../app");
    const http = require("http");
    /**
     * Get port from environment and store in Express.
     */
    port = normalizePort(process.env.PORT || "3000");
    /**
     * Create HTTP server.
     */
    server = http.createServer(app);
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
    app.set("port", port);
  })
  .catch((err) => {
    console.error("Database connection error", err);
    process.exit(1);
  });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + bind);
}

/** Closing DB connections on Node.js process exit or termination */
process.on("exit", (code) => {
  console.log(`About to exit with code: ${code}`);
  db.close();
});

// This event is emitted when the process is interrupted by a SIGINT signal,
// which is typically sent when the user presses Ctrl+C in the terminal.
process.on("SIGINT", () => {
  process.exit();
});
